
% cells = caTraceTrials_mouse(1,:);

% nestedCellArray = caTraceTrials_mouse{1, 1};

% flattenedColumnData = cell(size(nestedCellArray, 2), 1)';
columnArray = [];

trial_column = [];
cell_num_column = [];
columnArray_all = []; 
columnArray_mouse = {}; 
trialArray_mouse = {}; 
trialArray_all = [];


cell_num = 1;
for i = 1:size(caTraceTrials_mouse, 1)
    cells = caTraceTrials_mouse(i,:);
    for z = 1:size(cells, 2)
        nestedCellArray = cells{1, z};
        for k = 1:size(nestedCellArray, 2)
            columnArray = [];
            trialArray = [];
            % Extract the double array and transpose it to a column vector
            for qq = 1:size(nestedCellArray{1, k}, 1)
                trialArray = vertcat(trialArray, ones(size(nestedCellArray{1, k}, 2), 1)*qq);
                columnArray = vertcat(columnArray, nestedCellArray{1, k}(qq,:)');  % Assuming the data is in the first column of the nested cell array
                
                % trial_column(qq) = vertcat(trial_column, trial_num); % flattenedColumnData{k} = vertcat(flattenedColumnData(k), columnArray(:));
            end
            columnArray_mouse(z, k) = {columnArray};
            trialArray_mouse(z, k) = {trialArray};
            clear columnArray trialArray
        end
    end
    columnArray_all = horzcat(columnArray_all, columnArray_mouse);
    trialArray_all = horzcat(trialArray_all, trialArray_mouse); 
    clear columnArray_mouse trialArray_mouse
end

% Initialize an empty cell array to store the concatenated columns
concatenatedColumns = cell(1, size(columnArray_all, 2));

% Loop over columns
for col = 1:size(columnArray_all, 2)
    % Extract the current column
    currentColumn = columnArray_all(:, col);
    currentColumn_trials = trialArray_all(:,col); 
    event_1 = ones(size(currentColumn{1, 1}, 1), 1);
    event_2 = ones(size(currentColumn{2, 1}, 1), 1)*2;
    % Vertically concatenate the rows of the current column
    concatenatedColumns{col} = vertcat(currentColumn{:});
    concatenatedColumns_trials{col} = vertcat(currentColumn_trials{:});
    concatenatedEvents{col} = vertcat(event_1, event_2);
end



%% code generated by ChatGPT that is mostly not correct below - delete eventually
% 
% % Initialize an empty cell array to store flattened data
% flattenedData = cell(size(caTraceTrials_mouse, 1), 1);
% 
% % Loop over rows of the cell array
% for i = 1:size(caTraceTrials_mouse, 1)
%     % Initialize an empty cell array to store flattened row data
%     flattenedRowData = cell(1, size(caTraceTrials_mouse, 2));
% 
%     % Loop over columns of the cell array
%     for j = 1:size(caTraceTrials_mouse, 2)
%         % Extract the nested cell array
%         nestedCellArray = caTraceTrials_mouse{i, j};
% 
%         % Initialize an empty cell array to store flattened data
%         flattenedColumnData = cell(size(nestedCellArray, 1), 1);
% 
%         % Loop over the rows in the nested cell array
%         for k = 1:size(nestedCellArray, 2)
%             % Extract the double array and transpose it to a column vector
%             for qq = 1:size(nestedCellArray{1, k}, 1)
%                 columnArray = nestedCellArray{1, k}(qq,:)';  % Assuming the data is in the first column of the nested cell array
%                 flattenedColumnData{:, k} = vertcat(flattenedColumnData, columnArray(:));
%             end
%         end
% 
%         % Vertically concatenate the columns for each row into a single column
%         flattenedRowData{j} = vertcat(flattenedColumnData{:});
%     end
% 
%     % Horizontally concatenate the columns for each row into a single row
%     flattenedData{i} = horzcat(flattenedRowData{:});
% end
% 
% % Vertically concatenate the rows of flattened data into a single matrix
% result = vertcat(flattenedData{:});