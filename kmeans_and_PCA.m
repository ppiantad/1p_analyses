

data_for_clustering = zall_mean_all;

%% from Sean to do kmeans on traces

clusters_desired = 7;

[idx,C,sumdist3] = kmeans(data_for_clustering,clusters_desired,'Distance','correlation','Display','final', 'Replicates', 200,'Start','uniform');


for ii = 1:clusters_desired
    figure;
    plot(ts1, data_for_clustering(idx == ii, :));

end


figure;
for ii = 1:clusters_desired

    plot(ts1, mean(data_for_clustering(idx == ii, :)));
    hold on;

end

%%
figure; imagesc(ts1, 1, zall_array{1, 7})


%% This code was generated by ChatGPT
% perform PCA
[coeff, score, ~, ~, explained] = pca(data_for_clustering);

% plot the mean activity of the main principle components
num_pcs_to_plot = 3; % choose the number of principle components to plot
pcs_to_plot = 1:num_pcs_to_plot;
figure;
hold on;
for i = pcs_to_plot
    plot(ts1(:, 1:numMeasurements), coeff(:,i));
end
xlabel('Time (s)');
ylabel('PCA weight');
legend(strcat('PC', string(pcs_to_plot)));
title('Mean activity of main principle components');

% plot the percentage of variance explained by each principle component
figure;
pareto(explained);
xlabel('Principal Component');
ylabel('Variance Explained (%)');
title('Variance Explained by Principal Components');

% determine which neurons are assigned to each principle component
[~, max_scores_idx] = max(abs(score), [], 2); % find the index of the max score for each neuron
neurons_per_pc = accumarray(max_scores_idx, (1:size(data_for_clustering,1))', [], @(x) {x}); % group the neurons by principle component
disp('Neurons assigned to each principle component:');
for i = 1:num_pcs_to_plot
    fprintf('PC %d: Neurons %s\n', i, num2str(neurons_per_pc{i}));
end

% calculate the correlation matrix between principle components
score_norm = zscore(score); % normalize each principle component to have mean 0 and std 1
pc_corr = corrcoef(score_norm);
figure;
imagesc(pc_corr);
colorbar;
xlabel('Principal Component');
ylabel('Principal Component');
title('Correlation Matrix between Principal Components');

