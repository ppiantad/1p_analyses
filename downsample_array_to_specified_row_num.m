% set the desired number of rows
num_rows = 282;

% randomly select a subset of rows
selected_rows = datasample(1:size(neuron_mean_large_RDT_D1_block_1, 1), num_rows, 'Replace', false);

% extract the selected rows from the original array
downsampled_neuron_mean_large_RDT_D1_block_1 = neuron_mean_large_RDT_D1_block_1(selected_rows, :);


combined_data = [neuron_mean_large_pre_rdt_rm_block_1 downsampled_neuron_mean_large_RDT_D1_block_1];


%% This code was generated by ChatGPT
% perform PCA
[coeff, score, ~, ~, explained] = pca(combined_data);

% plot the mean activity of the main principle components
num_pcs_to_plot = 3; % choose the number of principle components to plot
pcs_to_plot = 1:num_pcs_to_plot;
figure;
hold on;
for i = pcs_to_plot
    plot(ts1, coeff(1:201,i));
end
xlabel('Time (s)');
ylabel('PCA weight');
legend(strcat('PC', string(pcs_to_plot)));
title('Mean activity of main principle components');

% plot the percentage of variance explained by each principle component
figure;
pareto(explained);
xlabel('Principal Component');
ylabel('Variance Explained (%)');
title('Variance Explained by Principal Components');

% determine which neurons are assigned to each principle component
[~, max_scores_idx] = max(abs(score), [], 2); % find the index of the max score for each neuron
neurons_per_pc = accumarray(max_scores_idx, (1:size(neuron_mean,1))', [], @(x) {x}); % group the neurons by principle component
disp('Neurons assigned to each principle component:');
for i = 1:num_pcs_to_plot
    fprintf('PC %d: Neurons %s\n', i, num2str(neurons_per_pc{i}));
end

% calculate the correlation matrix between principle components
score_norm = zscore(score); % normalize each principle component to have mean 0 and std 1
pc_corr = corrcoef(score_norm);
figure;
imagesc(pc_corr);
colorbar;
xlabel('Principal Component');
ylabel('Principal Component');
title('Correlation Matrix between Principal Components');