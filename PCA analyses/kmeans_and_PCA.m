

% data_for_clustering = zall_mean_all_array{1,1};

% data_for_clustering = neuron_mean_array{1, 1}  ;

% data_for_clustering = zscore(data_for_clustering, 0, 2);

data_for_clustering = zall_mean_all_array{1, 1};  

%% from Sean to do kmeans on traces

clusters_desired = 4;

[idx,C,sumdist3] = kmeans(data_for_clustering,clusters_desired,'Distance','correlation','Display','final', 'Replicates', 200,'Start','uniform');


for ii = 1:clusters_desired
    figure;
    plot(ts1, data_for_clustering(idx == ii, :));

end


figure;
for ii = 1:clusters_desired

    plot(ts1, mean(data_for_clustering(idx == ii, :)));
    hold on;
    legend;
end



%% big heatmap for categories


cluster_1_neurons = data_for_clustering(idx == 1, :);
cluster_2_neurons = data_for_clustering(idx == 2, :);
cluster_3_neurons = data_for_clustering(idx == 3, :);
cluster_4_neurons = data_for_clustering(idx == 4, :);

only_active_array_stacked = [pre_choice_neurons; post_choice_reward_neurons; consumption_neurons];

% Sort the rows of activated_neuron_mean based on peak_times.
[peak_values, time_of_peak_activity] = max(cluster_1_neurons, [], 2);
[~, sort_indices] = sort(time_of_peak_activity);
cluster_1_neurons_neurons_sorted = cluster_1_neurons(sort_indices, :);



% Sort the rows of activated_neuron_mean based on peak_times.
[peak_values, time_of_peak_activity] = max(cluster_2_neurons, [], 2);
[~, sort_indices] = sort(time_of_peak_activity);
cluster_2_neurons_neurons_sorted = cluster_2_neurons(sort_indices, :);


% Sort the rows of activated_neuron_mean based on peak_times.
[peak_values, time_of_peak_activity] = max(cluster_3_neurons, [], 2);
[~, sort_indices] = sort(time_of_peak_activity);
cluster_3_neurons_neurons_sorted = cluster_3_neurons(sort_indices, :);


% Sort the rows of activated_neuron_mean based on peak_times.
[peak_values, time_of_peak_activity] = max(cluster_4_neurons, [], 2);
[~, sort_indices] = sort(time_of_peak_activity);
cluster_4_neurons_neurons_sorted = cluster_4_neurons(sort_indices, :);

sorted_only_active_array_stacked = [cluster_1_neurons_neurons_sorted; cluster_2_neurons_neurons_sorted; cluster_3_neurons_neurons_sorted; cluster_4_neurons_neurons_sorted];

% Now, activated_neuron_mean_sorted contains the rows of neuron_mean filtered by respClass_all == 1
% and sorted by the time of peak activity.

figure;
% Generate the heatmap
imagesc(ts1, 1, cluster_4_neurons_neurons_sorted);

% Add a colorbar and axis labels
colorbar;
xlabel('Time (s)');
ylabel('Neuron');

% Reverse the y-axis so that the highest mean activity is at the top
set(gca, 'YDir', 'reverse');
clim([-1 1])
xline(0);


% If you want to customize the color map, you can use colormap function
% For example, using a blue-white-red colormap:
colormap(gray);

% If you want to limit the color scale to the range [0, 1]
caxis([-1 1]); % Assuming correlations range from -1 to 1
% Add a separate axes for the colorbar to associate it only with the upper tile
c = colorbar('eastoutside');
set(c, 'YTick', clim); % 
%%
figure; imagesc(ts1, 1, zall_array{1, 7})


%% This code was generated by ChatGPT
% perform PCA
[coeff, score, ~, ~, explained] = pca(data_for_clustering);

% plot the mean activity of the main principle components
num_pcs_to_plot = 5; % choose the number of principle components to plot
pcs_to_plot = 1:num_pcs_to_plot;
figure;
hold on;
for i = pcs_to_plot
    plot(ts1(:, 1:numMeasurements), coeff(:,i));
end
xlabel('Time (s)');
ylabel('PCA weight');
legend(strcat('PC', string(pcs_to_plot)));
title('Mean activity of main principle components');

% plot the percentage of variance explained by each principle component
figure;
pareto(explained);
xlabel('Principal Component');
ylabel('Variance Explained (%)');
title('Variance Explained by Principal Components');

% determine which neurons are assigned to each principle component
% I am a bit confused as to why this takes the absolute value - perhaps
% high scores that are negative correspond to inverse relationships? When I
% plot individual trials, high negative loadings don't seem to "look" like
% what I expect from a given PC. It might be better to simply take the
% HIGHEST score, nto the highest abs score
% [~, max_scores_idx] = max(abs(score), [], 2); % find the index of the max score for each neuron
[~, max_scores_idx] = max(score, [], 2); % find the index of the max score for each neuron
neurons_per_pc = accumarray(max_scores_idx, (1:size(data_for_clustering,1))', [], @(x) {x}); % group the neurons by principle component
disp('Neurons assigned to each principle component:');
for i = 1:num_pcs_to_plot
    fprintf('PC %d: Neurons %s\n', i, num2str(neurons_per_pc{i}));
end

% calculate the correlation matrix between principle components
score_norm = zscore(score); % normalize each principle component to have mean 0 and std 1
pc_corr = corrcoef(score_norm);
figure;
imagesc(pc_corr);
colorbar;
xlabel('Principal Component');
ylabel('Principal Component');
title('Correlation Matrix between Principal Components');

